#include <LiquidCrystal.h>
#include "Enums.h"
#include <Wire.h>

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

/****************** Program functions ******************/
/**
 * auto_sm(): Code for automatic mode.
 */
void auto_sm();

/**
 * auto temp: Print temperature to serial console.
 * 			  Debugging function. Will be removed?
 */
void auto_temp();

/**
 * auto fanstate: Set fan state according to temperature
 */
void auto_setFanState();

/**
 * man_sm(): Code for manual mode.
 */
void man_sm();

/**
 * printState(): Print relevant info on LCD screen.
 */
void printState();

/**
 * getUsr(): Get username from serial input.
 */
void getUsr();

/**
 * getPwd(): Get password from serial input.
 */
void getPwd();

/**
 * chkPwd(): Check if password is right.
 */
void chkPwd();

/**
 * Get command from serial input.
 */
void getInp();

/**
 * execCmd(): Execute command if it exists.
 */
void execCmd();

/**
 * whoAmI(): "whoami" command. Displays username on LCD screen.
 */
void whoAmI();

/**
 * temp(): "temp" command. Displays temperature on LCD screen.
 */
void temp();

/**
 * fanSpeed(): Part of "setfan" command. Reads desired speed from
 * 			   Serial input.
 */
void fanSpeed();

/**
 * fanSetState(): Part of "setfan" command. Sets fanspeed to the
 * 				  desired speed level.
 */
void fanSetState();

/**
 * getFan(): "getfan" command. Prints current fan speed on LCD screen.
 */
void getFan();

/*************** End of program functions ***************/

/********************* Constants ************************/
#define PAYLOAD 3
#define NODES 2
#define START_NODE 8
#define READ_DELAY 1000
/****************** End of constants ********************/

/********************* Variables ************************/
String inp;
String usr;
int nodeData[PAYLOAD];
int degC;

Enums SM; // used for state enumerations
FanState fanState = off, lastFanState = off;
/******************* End of variables *******************/

/**
 * Initial setup
 */
void setup()
{
	lcd.clear();
	lcd.begin(16,2);
	lcd.setCursor(0,0);
	Serial.begin(9600);
	SM.setState(automatic);

	printState();
	Wire.begin();
}

/**
 * Program loop
 */
void loop()
{
	if(SM.getState() != automatic) {
		man_sm();
	} else {
		auto_sm();

	}
}

/**
 * Automatic State Machine code
 */
void auto_sm() {
	for(int i = START_NODE; i < NODES + START_NODE; i++) {
		Serial.println("** Requesting packages **");
		Wire.requestFrom(i, PAYLOAD);
		Serial.println("** Packages receive **");
		if(Wire.available() == PAYLOAD) {
			for(int j = 0; j < PAYLOAD; j++) {
				nodeData[j] = Wire.read();
			}
			int data = (nodeData[1] << 8) + nodeData[2];
			if(nodeData[0] == START_NODE) {
				degC = data;
			} else if(nodeData[0] == START_NODE + 1) {
				fanState = (FanState) data;
			} else if(nodeData[0] == START_NODE + 2) {
				// Photoresistor?
			}
		}
	}
	Serial.println("**** Fan speed ****");
	Serial.println(fanState);
	Serial.println("*******************");
	auto_temp();
	Serial.println("** Begin transmission **");
	Wire.beginTransmission(START_NODE+1);
	byte val = 0;
	Wire.write(val);
	Wire.endTransmission();
	Serial.println("** End of transmission **");
	delay(READ_DELAY);
}

/**
 * Debugging function. Prints temperature to serial console.
 */
void auto_temp() {
	Serial.println("**** Temperature ****");
	Serial.println(degC);
	Serial.println("*******************");
}

/**
 * Set fan state automatically according to temperature
 */
void auto_setFanState() {
	if(degC <= 20 && fanState != off) {
		fanState = off;
	} else if(degC > 20 && degC <= 25 && fanState != slow) {
		fanState = slow;
	} else if(degC > 25 && degC <= 30 && fanState != normal) {
		fanState = normal;
	} else if(degC > 30 && fanState != fast) {
		fanState = fast;
	}
	if(fanState != lastFanState) {
		// Send right signal
	}
	lastFanState = fanState;
}

/**
 * Manual controlled state machine code
 */
void man_sm() {
	switch(SM.getState()) {
		case readCmd:
			getInp();
			break;
		case cmdComplete:
			execCmd();
			printState();
			break;
		case readPwd:
			getPwd();
			break;
		case checkPwd:
			chkPwd();
			break;
		case logout:
			SM.setState(readUsr);
			printState();
			break;
		case readUsr:
			getUsr();
			break;
		case setFan:
			fanSpeed();
			break;
		case fanSet:
			fanSetState();
			break;
		default:
			break;
	}
}
/**
 * Prints relevant info on LCD screen according to current state
 */
void printState() {
	lcd.clear();
	switch(SM.getState()) {
		case readUsr:
			lcd.print("usr:");
			break;
		case setFan:
			lcd.print("#:setfan");
			lcd.setCursor(0,1);
			lcd.print("state:");
			break;
		case automatic:
			lcd.print("auto");
			break;
		default:
			lcd.print("#:");
			break;
	}
}

/**
 * Get username from serial input
 */
void getUsr() {
	while(Serial.available()) {
		char inpChar = Serial.read();
		if(inpChar == '\n') {
			usr = inp;
			inp = "";
			SM.setState(readPwd);
			lcd.print(usr);
			lcd.setCursor(0,1);
			lcd.print("pwd:");
		} else {
			inp += inpChar;
		}
	}
}
/**
 * Get password from serial input.
 */
void getPwd() {
	while(Serial.available()) {
		char inpChar = Serial.read();
		if(inpChar == '\n') {
			SM.setState(checkPwd);
		} else {
			inp += inpChar;
		}
	}
}
/**
 * Check if password from Serial input is correct.
 */
void chkPwd() {
	if(usr == "kristofer") {
		if(inp == "3.1415") {
			SM.setState(readCmd);
		} else {
			SM.setState(readUsr);
		}
	} else if(usr == "stefan") {
		if(inp == "frobert") {
			SM.setState(readCmd);
		} else {
			SM.setState(readUsr);
		}
	} else if(usr == "haukur") {
		if(inp == "thinkpad") {
			SM.setState(readCmd);
		} else {
			SM.setState(readUsr);
		}
	}
	else if(usr == "guest") {
		if(inp == "guest") {
			SM.setState(readCmd);
		}  else {
			SM.setState(readUsr);
		}
	} else {
		SM.setState(readUsr);
	}
	inp = "";
	printState();
}

/**
 * Read input from Serial console. Make sure it ends with NL
 */
void getInp() {
	while(Serial.available()) {
		char inpChar = Serial.read();
		if(inpChar == '\n') {
			SM.setState(cmdComplete);
		} else {
			inp += inpChar;
		}
	}
}

/**
 * Execute command stored in 'inp' variable
 */
void execCmd() {
	if(inp == "logout") {
		SM.setState(logout);
	} else if (inp == "whoami") {
		whoAmI();
	} else if(inp == "temp") {
		temp();
	} else if(inp == "setfan") {
		SM.setState(setFan);
	} else if(inp == "getfan") {
		getFan();
	} else if(inp == "auto") {
		SM.setState(automatic);
	} else if(inp == "manual") {
		SM.setState(readUsr);
	}
	else {
		lcd.print(inp); lcd.print("                ");
		SM.setState(readCmd);
		//lcd.setCursor(0,0);
		delay(1000);
	}
	inp = "";
	printState();
}

/**
 * "whoami" command
 */
void whoAmI() {
	lcd.print(inp);
	lcd.setCursor(0, 1);
	lcd.print(usr);
	delay(1500);
	SM.setState(readCmd);
}
/**
 * "temp" command
 */
void temp() {
	lcd.print(inp);
	lcd.setCursor(0,1);
	lcd.print("20 C");
	delay(1500);
	SM.setState(readCmd);
}
/**
 * fanSpeed and fanSetState: "setfan" command
 */
void fanSpeed() {
	while(Serial.available()) {
		char inpChar = Serial.read();
		if(inpChar == '\n') {
			SM.setState(fanSet);
		} else {
			inp += inpChar;
		}
	}
}
void fanSetState() {
	if(inp == "off") {
		SM.setFanState(off);
	} else if(inp == "slow") {
		SM.setFanState(slow);
	} else if(inp == "normal") {
		SM.setFanState(normal);
	} else if(inp == "fast") {
		SM.setFanState(fast);
	}
	SM.setState(readCmd);
	printState();
	inp = "";
}
/**
 * "getfan" command
 */
void getFan() {
	lcd.print(inp);
	lcd.setCursor(0,1);
	switch(SM.getFanState()) {
		case off:
			lcd.print("off");
			break;
		case slow:
			lcd.print("slow");
			break;
		case normal:
			lcd.print("normal");
			break;
		case fast:
			lcd.print("fast");
			break;
		default:
			break;
	}
	delay(1500);
}
