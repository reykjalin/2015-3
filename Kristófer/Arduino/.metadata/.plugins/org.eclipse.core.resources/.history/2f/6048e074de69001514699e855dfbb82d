#include <MPU6050.h>

// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif


// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 accelgyro;
//MPU6050 accelgyro(0x69); // <-- use for AD0 high

int16_t ax, ay, az;
int16_t gx, gy, gz;
unsigned long acc;

// uncomment "OUTPUT_READABLE_ACCELGYRO" if you want to see a tab-separated
// list of the accel X/Y/Z and then gyro X/Y/Z values in decimal. Easy to read,
// not so easy to parse, and slow(er) over UART.
#define OUTPUT_READABLE_ACCELGYRO

// uncomment "OUTPUT_BINARY_ACCELGYRO" to send all 6 axes of data as 16-bit
// binary, one right after the other. This is very fast (as fast as possible
// without compression or data loss), and easy to parse, but impossible to read
// for a human.
//#define OUTPUT_BINARY_ACCELGYRO

////The setup function is called once at startup of the sketch
void setup()
{
	// join I2C bus (I2Cdev library doesn't do this automatically)
	#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
		Wire.begin();
	#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
		Fastwire::setup(400, true);
	#endif

	// initialize serial communication
	// (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
	// it's really up to you depending on your project)
	Serial.begin(9600);

	// initialize device
	Serial.println("Initializing I2C devices...");
	accelgyro.initialize();

	// verify connection
	Serial.println("Testing device connections...");
	Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
}


// The loop function is called in an endless loop
void loop()
{
	// read raw accel/gyro measurements from device
	accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

	#ifdef OUTPUT_READABLE_ACCELGYRO
		// display tab-separated accel/gyro x/y/z values
		//az -= 15900;
		Serial.print("a:\t");
		Serial.print(ax); Serial.print("\t");
		Serial.print(ay); Serial.print("\t");
		Serial.print(az); Serial.println("");
		//acc = az * (long) az;
		Serial.println(sqrt((long)ax*ax + (long)ay*ay + (long)az*az));
//		Serial.print(gx); Serial.print("\t");
//		Serial.print(gy); Serial.print("\t");
//		Serial.println(gz);
		Serial.println("");
	#endif

	#ifdef OUTPUT_BINARY_ACCELGYRO
		Serial.write((uint8_t)(ax >> 8)); Serial.write((uint8_t)(ax & 0xFF));
		Serial.write((uint8_t)(ay >> 8)); Serial.write((uint8_t)(ay & 0xFF));
		Serial.write((uint8_t)(az >> 8)); Serial.write((uint8_t)(az & 0xFF));
		Serial.write((uint8_t)(gx >> 8)); Serial.write((uint8_t)(gx & 0xFF));
		Serial.write((uint8_t)(gy >> 8)); Serial.write((uint8_t)(gy & 0xFF));
		Serial.write((uint8_t)(gz >> 8)); Serial.write((uint8_t)(gz & 0xFF));
	#endif


	delay(500);
}
